Assignment - 2 (Ans)

 // a) Explore Java API Documentation: just reading the documentation.

        // b) Method-local variable status of type boolean with value true, convert         to   	String.
        boolean status = true;
        String statusString = Boolean.toString(status);
        System.out.println("Boolean to String: " + statusString);

        // c) Convert String "true" to boolean using parseBoolean.
        String strStatus = "true";
        boolean parsedStatus = Boolean.parseBoolean(strStatus);
        System.out.println("String to Boolean: " + parsedStatus);

        // d) Attempt to convert String "1" or "0" to boolean.
        strStatus = "1";
        boolean parsedInvalid = Boolean.parseBoolean(strStatus);
        System.out.println("String '1' to Boolean (invalid behavior): " + parsedInvalid); // Output: false

        // e) Convert boolean 'true' to Boolean wrapper class.
        Boolean wrapperStatus = Boolean.valueOf(status);
        System.out.println("Boolean to Wrapper Boolean: " + wrapperStatus);

        // f) Convert String "true" to Boolean wrapper class.
        wrapperStatus = Boolean.valueOf("true");
        System.out.println("String to Wrapper Boolean: " + wrapperStatus);

        // g) Experiment converting Boolean to other types - skipping, as Boolean 	only 	converts to String.

-----------------------------------------------------------------------------------

  // a) Explore Java API Documentation: java.lang.Byte.
        // No code required, just reading the documentation.

        // b) Test how many bytes are used to represent a byte value.
        System.out.println("Bytes used for a byte: " + Byte.BYTES);

        // c) Find the minimum and maximum values of byte.
        System.out.println("Byte Min Value: " + Byte.MIN_VALUE);
        System.out.println("Byte Max Value: " + Byte.MAX_VALUE);

        // d) Convert byte to String.
        byte number = 12;
        String byteString = Byte.toString(number);
        System.out.println("Byte to String: " + byteString);

        // e) Convert String to byte.
        String strNumber = "20";
        byte parsedByte = Byte.parseByte(strNumber);
        System.out.println("String to Byte: " + parsedByte);

        // f) Attempt to convert invalid String to byte (will throw an exception).
        try {
            strNumber = "ABCD123";
            parsedByte = Byte.parseByte(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Byte conversion error: " + e);
        }

        // g) Convert byte to Wrapper class.
        Byte wrapperByte = Byte.valueOf(number);
        System.out.println("Byte to Wrapper Byte: " + wrapperByte);

        // h) Convert String to Wrapper class.
        wrapperByte = Byte.valueOf("25");
        System.out.println("String to Wrapper Byte: " + wrapperByte);

------------------------------------------------------------------------------------

 // a) Explore Java API Documentation: java.lang.Short
        // No code required, this is reading documentation.

        // b) Test how many bytes are used to represent a short value.
        System.out.println("Bytes used for a short: " + Short.BYTES);

        // c) Find the minimum and maximum values of short.
        System.out.println("Short Min Value: " + Short.MIN_VALUE);
        System.out.println("Short Max Value: " + Short.MAX_VALUE);

        // d) Declare a method-local variable number of type short and convert it to 	a String.
        short number = 1500;
        String shortString = Short.toString(number);
        System.out.println("Short to String: " + shortString);

        // e) Declare a method-local variable strNumber of type String and convert 	it to a 	short value.
        String strNumber = "2500";
        short parsedShort = Short.parseShort(strNumber);
        System.out.println("String to Short: " + parsedShort);

        // f) Attempt to convert invalid String to short (will throw an exception).
        try {
            strNumber = "Ab12Cd3";
            parsedShort = Short.parseShort(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Short conversion error: " + e);
        }

        // g) Convert short to Wrapper class (Short).
        Short wrapperShort = Short.valueOf(number);
        System.out.println("Short to Wrapper Short: " + wrapperShort);

        // h) Convert String to Wrapper class (Short).
        wrapperShort = Short.valueOf("3500");
        System.out.println("String to Wrapper Short: " + wrapperShort);

        // i) Experiment with converting a short value into other primitive types.
        int convertedToInt = number;  // Implicit conversion to int
        long convertedToLong = number; // Implicit conversion to long
        float convertedToFloat = number; // Implicit conversion to float
        double convertedToDouble = number; // Implicit conversion to double

        System.out.println("Short to Int: " + convertedToInt);
        System.out.println("Short to Long: " + convertedToLong);
        System.out.println("Short to Float: " + convertedToFloat);
        System.out.println("Short to Double: " + convertedToDouble);

-----------------------------------------------------------------------------------

 // a) Explore Java API Documentation: java.lang.Integer
        // No code required, this is reading the documentation.

        // b) Test how many bytes are used to represent an int value.
        System.out.println("Bytes used for an int: " + Integer.BYTES);

        // c) Find the minimum and maximum values of int.
        System.out.println("Integer Min Value: " + Integer.MIN_VALUE);
        System.out.println("Integer Max Value: " + Integer.MAX_VALUE);

        // d) Declare a method-local variable number of type int and convert it to a 	String.
        int number = 12345;
        String intString = Integer.toString(number);
        System.out.println("Integer to String: " + intString);

        // e) Declare a method-local variable strNumber of type String and convert 	it to an 	int value.
        String strNumber = "56789";
        int parsedInt = Integer.parseInt(strNumber);
        System.out.println("String to Integer: " + parsedInt);

        // f) Attempt to convert invalid String to int (will throw an exception).
        try {
            strNumber = "Ab12Cd3";
            parsedInt = Integer.parseInt(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Integer conversion error: " + e);
        }

        // g) Convert int to Wrapper class (Integer).
        Integer wrapperInt = Integer.valueOf(number);
        System.out.println("Integer to Wrapper Integer: " + wrapperInt);

        // h) Convert String to Wrapper class (Integer).
        wrapperInt = Integer.valueOf("34567");
        System.out.println("String to Wrapper Integer: " + wrapperInt);

        // i) Declare two integer variables with values 10 and 20, and add them 	using 	Integer.sum().
        int num1 = 10;
        int num2 = 20;
        int sum = Integer.sum(num1, num2);
        System.out.println("Sum of 10 and 20: " + sum);

        // j) Find the minimum and maximum between 10 and 20 using Integer.min() and 		Integer.max().
        int min = Integer.min(num1, num2);
        int max = Integer.max(num1, num2);
        System.out.println("Min of 10 and 20: " + min);
        System.out.println("Max of 10 and 20: " + max);

        // k) Convert an integer value (7) to binary, octal, and hexadecimal 	strings.
        int value = 7;
        String binaryString = Integer.toBinaryString(value);
        String octalString = Integer.toOctalString(value);
        String hexString = Integer.toHexString(value);
        System.out.println("Integer 7 in Binary: " + binaryString);
        System.out.println("Integer 7 in Octal: " + octalString);
        System.out.println("Integer 7 in Hexadecimal: " + hexString);

        // l) Convert int to other primitive types.
        long convertedToLong = number; // Implicit conversion to long
        float convertedToFloat = number; // Implicit conversion to float
        double convertedToDouble = number; // Implicit conversion to double

        System.out.println("Integer to Long: " + convertedToLong);
        System.out.println("Integer to Float: " + convertedToFloat);
        System.out.println("Integer to Double: " + convertedToDouble);

---------------------------------------------------------------------------------

// b) Test how many bytes are used to represent a long value using Long.BYTES.
        System.out.println("Bytes used for a long: " + Long.BYTES);

        // c) Find the minimum and maximum values of long using Long.MIN_VALUE and 			Long.MAX_VALUE.
        System.out.println("Long Min Value: " + Long.MIN_VALUE);
        System.out.println("Long Max Value: " + Long.MAX_VALUE);

        // d) Declare a method-local variable number of type long and convert it to 		a 	String using Long.toString().
        long number = 9876543210L;
        String longString = Long.toString(number);
        System.out.println("Long to String: " + longString);

        // e) Declare a method-local variable strNumber of type String and convert 			it to a long value using Long.parseLong().
        String strNumber = "1234567890";
        long parsedLong = Long.parseLong(strNumber);
        System.out.println("String to Long: " + parsedLong);

        // f) Attempt to convert an invalid String ("Ab12Cd3") to a long value (will 	throw 	NumberFormatException).
        try {
            strNumber = "Ab12Cd3";
            parsedLong = Long.parseLong(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Long conversion error: " + e);
        }

        // g) Convert a long to the corresponding wrapper class using Long.valueOf			().
        Long wrapperLong = Long.valueOf(number);
        System.out.println("Long to Wrapper Long: " + wrapperLong);

        // h) Convert a String to the corresponding wrapper class using 			Long.valueOf().
        wrapperLong = Long.valueOf("987654321");
        System.out.println("String to Wrapper Long: " + wrapperLong);

        // i) Declare two long variables and add them using Long.sum().
        long num1 = 1123L;
        long num2 = 9845L;
        long sum = Long.sum(num1, num2);
        System.out.println("Sum of 1123 and 9845: " + sum);

        // j) Find the minimum and maximum between two long values using Long.min() 			and Long.max().
        long min = Long.min(1122L, 5566L);
        long max = Long.max(1122L, 5566L);
        System.out.println("Min of 1122 and 5566: " + min);
        System.out.println("Max of 1122 and 5566: " + max);

        // k) Convert a long value (7) to binary, octal, and hexadecimal strings 			using Long.toBinaryString(), Long.toOctalString(), and Long.toHexString().
        long value = 7L;
        String binaryString = Long.toBinaryString(value);
        String octalString = Long.toOctalString(value);
        String hexString = Long.toHexString(value);
        System.out.println("Long 7 in Binary: " + binaryString);
        System.out.println("Long 7 in Octal: " + octalString);
        System.out.println("Long 7 in Hexadecimal: " + hexString);

        // l) Experiment with converting a long value into other primitive types or 		vice versa.
        int convertedToInt = (int) number;  // Explicit conversion to int
        float convertedToFloat = number;    // Implicit conversion to float
        double convertedToDouble = number;  // Implicit conversion to double

        System.out.println("Long to Int: " + convertedToInt);
        System.out.println("Long to Float: " + convertedToFloat);
        System.out.println("Long to Double: " + convertedToDouble);
-----------------------------------------------------------------------------------

 // b) Test how many bytes are used to represent a float value using Float.BYTES.
        System.out.println("Bytes used for a float: " + Float.BYTES);

        // c) Find the minimum and maximum values of float using Float.MIN_VALUE and 		Float.MAX_VALUE.
        System.out.println("Float Min Value: " + Float.MIN_VALUE);
        System.out.println("Float Max Value: " + Float.MAX_VALUE);

        // d) Declare a method-local variable number of type float and convert it to 	a String 	using Float.toString().
        float number = 123.45f;
        String floatString = Float.toString(number);
        System.out.println("Float to String: " + floatString);

        // e) Declare a method-local variable strNumber of type String and convert 	it to a 	float value using Float.parseFloat().
        String strNumber = "456.78";
        float parsedFloat = Float.parseFloat(strNumber);
        System.out.println("String to Float: " + parsedFloat);

        // f) Attempt to convert an invalid String ("Ab12Cd3") to a float value 	(will 	throw NumberFormatException).
        try {
            strNumber = "Ab12Cd3";
            parsedFloat = Float.parseFloat(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Float conversion error: " + e);
        }

        // g) Convert a float to the corresponding wrapper class using 	Float.valueOf().
        Float wrapperFloat = Float.valueOf(number);
        System.out.println("Float to Wrapper Float: " + wrapperFloat);

        // h) Convert a String to the corresponding wrapper class using 	Float.valueOf().
        wrapperFloat = Float.valueOf("789.01");
        System.out.println("String to Wrapper Float: " + wrapperFloat);

        // i) Declare two float variables and add them using Float.sum().
        float num1 = 112.3f;
        float num2 = 984.5f;
        float sum = Float.sum(num1, num2);
        System.out.println("Sum of 112.3 and 984.5: " + sum);

        // j) Find the minimum and maximum between two float values using Float.min	() and 	Float.max().
        float min = Float.min(112.2f, 556.6f);
        float max = Float.max(112.2f, 556.6f);
        System.out.println("Min of 112.2 and 556.6: " + min);
        System.out.println("Max of 112.2 and 556.6: " + max);

        // k) Find the square root of -25.0f using Math.sqrt().
        float negativeValue = -25.0f;
        double sqrtValue = Math.sqrt(negativeValue);
        System.out.println("Square root of -25.0: " + sqrtValue); // NaN (Not a 	Number)

        // l) Declare two float variables with the same value, 0.0f, and divide 	them.
        float zero1 = 0.0f;
        float zero2 = 0.0f;
        float divisionResult = zero1 / zero2;
        System.out.println("Division of 0.0f by 0.0f: " + divisionResult); // Result 	will be 	NaN

        // m) Experiment with converting a float value into other primitive types.
        int convertedToInt = (int) number;  // Explicit conversion to int
        long convertedToLong = (long) number;  // Explicit conversion to long
        double convertedToDouble = number;  // Implicit conversion to double

        System.out.println("Float to Int: " + convertedToInt);
        System.out.println("Float to Long: " + convertedToLong);
        System.out.println("Float to Double: " + convertedToDouble);
----------------------------------------------------------------------------------

// b) Test how many bytes are used to represent a double value using Double.BYTES.
        System.out.println("Bytes used for a double: " + Double.BYTES);

        // c) Find the minimum and maximum values of double using Double.MIN_VALUE and Double.MAX_VALUE.
        System.out.println("Double Min Value: " + Double.MIN_VALUE);
        System.out.println("Double Max Value: " + Double.MAX_VALUE);

        // d) Declare a method-local variable number of type double and convert it to a String using Double.toString().
        double number = 12345.6789;
        String doubleString = Double.toString(number);
        System.out.println("Double to String: " + doubleString);

        // e) Declare a method-local variable strNumber of type String and convert it to a double value using Double.parseDouble().
        String strNumber = "45678.1234";
        double parsedDouble = Double.parseDouble(strNumber);
        System.out.println("String to Double: " + parsedDouble);

        // f) Attempt to convert an invalid String ("Ab12Cd3") to a double value (will throw NumberFormatException).
        try {
            strNumber = "Ab12Cd3";
            parsedDouble = Double.parseDouble(strNumber);
        } catch (NumberFormatException e) {
            System.out.println("Invalid String to Double conversion error: " + e);
        }

        // g) Convert a double to the corresponding wrapper class using Double.valueOf().
        Double wrapperDouble = Double.valueOf(number);
        System.out.println("Double to Wrapper Double: " + wrapperDouble);

        // h) Convert a String to the corresponding wrapper class using Double.valueOf().
        wrapperDouble = Double.valueOf("789.6543");
        System.out.println("String to Wrapper Double: " + wrapperDouble);

        // i) Declare two double variables and add them using Double.sum().
        double num1 = 112.3;
        double num2 = 984.5;
        double sum = Double.sum(num1, num2);
        System.out.println("Sum of 112.3 and 984.5: " + sum);

        // j) Find the minimum and maximum between two double values using Double.min() and Double.max().
        double min = Double.min(112.2, 556.6);
        double max = Double.max(112.2, 556.6);
        System.out.println("Min of 112.2 and 556.6: " + min);
        System.out.println("Max of 112.2 and 556.6: " + max);

        // k) Find the square root of -25.0 using Math.sqrt().
        double negativeValue = -25.0;
        double sqrtValue = Math.sqrt(negativeValue);
        System.out.println("Square root of -25.0: " + sqrtValue); // NaN (Not a Number)

        // l) Declare two double variables with the same value, 0.0, and divide them.
        double zero1 = 0.0;
        double zero2 = 0.0;
        double divisionResult = zero1 / zero2;
        System.out.println("Division of 0.0 by 0.0: " + divisionResult); // Result will be NaN

        // m) Experiment with converting a double value into other primitive types.
        int convertedToInt = (int) number;  // Explicit conversion to int
        long convertedToLong = (long) number;  // Explicit conversion to long
        float convertedToFloat = (float) number;  // Explicit conversion to float

        System.out.println("Double to Int: " + convertedToInt);
        System.out.println("Double to Long: " + convertedToLong);
        System.out.println("Double to Float: " + convertedToFloat);
------------------------------------------------------------------------------------

 // 1. byte
        byte byteValue = 10;
        String byteToString = Byte.toString(byteValue);
        String byteStringValueOf = String.valueOf(byteValue);
        System.out.println("Byte to String using toString: " + byteToString);
        System.out.println("Byte to String using valueOf: " + byteStringValueOf);

        // 2. short
        short shortValue = 100;
        String shortToString = Short.toString(shortValue);
        String shortStringValueOf = String.valueOf(shortValue);
        System.out.println("Short to String using toString: " + shortToString);
        System.out.println("Short to String using valueOf: " + shortStringValueOf);

        // 3. int
        int intValue = 1000;
        String intToString = Integer.toString(intValue);
        String intStringValueOf = String.valueOf(intValue);
        System.out.println("Int to String using toString: " + intToString);
        System.out.println("Int to String using valueOf: " + intStringValueOf);

        // 4. long
        long longValue = 10000L;
        String longToString = Long.toString(longValue);
        String longStringValueOf = String.valueOf(longValue);
        System.out.println("Long to String using toString: " + longToString);
        System.out.println("Long to String using valueOf: " + longStringValueOf);

        // 5. float
        float floatValue = 10.5f;
        String floatToString = Float.toString(floatValue);
        String floatStringValueOf = String.valueOf(floatValue);
        System.out.println("Float to String using toString: " + floatToString);
        System.out.println("Float to String using valueOf: " + floatStringValueOf);

        // 6. double
        double doubleValue = 100.1234;
        String doubleToString = Double.toString(doubleValue);
        String doubleStringValueOf = String.valueOf(doubleValue);
        System.out.println("Double to String using toString: " + doubleToString);
        System.out.println("Double to String using valueOf: " + doubleStringValueOf);

        // 7. char
        char charValue = 'A';
        String charToString = Character.toString(charValue);
        String charStringValueOf = String.valueOf(charValue);
        System.out.println("Char to String using toString: " + charToString);
        System.out.println("Char to String using valueOf: " + charStringValueOf);

        // 8. boolean
        boolean booleanValue = true;
        String booleanToString = Boolean.toString(booleanValue);
        String booleanStringValueOf = String.valueOf(booleanValue);
        System.out.println("Boolean to String using toString: " + booleanToString);
        System.out.println("Boolean to String using valueOf: " + booleanStringValueOf);
_-----------------------------------------------------------------------------------
// Instance variables (non-static fields)
    boolean instanceBoolean;
    char instanceChar;
    byte instanceByte;
    short instanceShort;
    int instanceInt;
    long instanceLong;
    float instanceFloat;
    double instanceDouble;

    // Static variables (static fields)
    static boolean staticBoolean;
    static char staticChar;
    static byte staticByte;
    static short staticShort;
    static int staticInt;
    static long staticLong;
    static float staticFloat;
    static double staticDouble;

    public static void main(String[] args) {
        DefaultValues obj = new DefaultValues();

        // Print instance variable default values
        System.out.println("Instance Variables Default Values:");
        System.out.println("boolean: " + obj.instanceBoolean);
        System.out.println("char: " + obj.instanceChar);
        System.out.println("byte: " + obj.instanceByte);
        System.out.println("short: " + obj.instanceShort);
        System.out.println("int: " + obj.instanceInt);
        System.out.println("long: " + obj.instanceLong);
        System.out.println("float: " + obj.instanceFloat);
        System.out.println("double: " + obj.instanceDouble);

        // Print static variable default values
        System.out.println("\nStatic Variables Default Values:");
        System.out.println("boolean: " + DefaultValues.staticBoolean);
        System.out.println("char: " + DefaultValues.staticChar);
        System.out.println("byte: " + DefaultValues.staticByte);
        System.out.println("short: " + DefaultValues.staticShort);
        System.out.println("int: " + DefaultValues.staticInt);
        System.out.println("long: " + DefaultValues.staticLong);
        System.out.println("float: " + DefaultValues.staticFloat);
        System.out.println("double: " + DefaultValues.staticDouble);
-----------------------------------------------------------------------------------------------
